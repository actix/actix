searchState.loadedDescShard("actix", 0, "Actix is an actor framework.\nActors are objects which encapsulate state and behavior.\nActor execution context.\nA helper type for representing different types of message …\nActor execution state\nThe address of an actor.\nAn Arbiter represents a thread that provides an …\nA handle for sending spawn and stop messages to an Arbiter.\nAsynchronous execution context.\nA specialized actor future holder for atomic asynchronous …\nAn actor execution context.\nActor execution context type\nDescribes how to handle messages of a specific type.\nThe errors that can occur during the message delivery …\nRepresent message that can be handled by an actor.\nA helper type that implements the <code>MessageResponse</code> trait.\nThe <code>Recipient</code> type allows to send one specific message to …\nHelper type for representing different type of message …\nA specialized actor future for asynchronous message …\nA specialized future for asynchronous message handling.\nThe type of value that this handler will return.\nThe type of value that this message will resolved with if …\nActor is running.\nA handle to a spawned future.\nActor is started.\nActor is stopped.\nActor is stopping.\nStream handling for Actors.\nActors with the ability to restart after failure.\nActor supervisor\nA manager for a per-thread distributed async runtime.\nRunner that keeps a System’s event loop alive until stop …\nA weakly referenced counterpart to <code>Addr&lt;A&gt;</code>.\nA weakly referenced counterpart to <code>Recipient&lt;M&gt;</code>\nHelper actors\nReturns the address of the context.\nGet handle to a the System’s initial Arbiter.\nRuns the provided future, blocking the current thread …\nCancels a spawned future.\nUtilities for tracking time.\nReturn a handle to the current thread’s Arbiter’s …\nGet current running system.\nThe <code>actix</code> prelude for library developers.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCustom <code>Future</code> and <code>Stream</code> implementation with <code>actix</code> support.\nThis method is called for every message received by this …\nCalled for every message emitted by the stream.\nReturn a handle to the this Arbiter’s message sender.\nNumeric system identifier.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if there is a System registered on the current …\nWait for Arbiter’s event loop to complete.\nMarks async main function as the <code>actix</code> system entry-point.\nSpawn a new Arbiter thread and start its event loop.\nCreate a new system.\nThe <code>actix</code> prelude.\nActors registry\nStarts the system and executes the supplied future.\nStarts event loop and will return once System is stopped.\nRuns the event loop until stopped, returning the exit code.\nRetrieves a reference to the underlying Actix runtime …\nSpawns a future on the current thread as a new task.\nSpawns a future into the context.\nSend a future to the Arbiter’s thread and spawn it.\nSend a future to the Arbiter’s thread and spawn it.\nSend a function to the Arbiter’s thread and execute it.\nSend a function to the Arbiter’s thread and execute it.\nRetrieve the current Actor execution state.\nImmediately stop processing incoming messages and switch …\nInstruct Arbiter to stop processing it’s event loop.\nStop Arbiter from continuing it’s event loop.\nStop the system (with code 0).\nStop the system with a given exit code.\nSync Actors support\nTerminate actor execution unconditionally. This sets the …\nMarks async test functions to use the <code>actix</code> system …\nTry to get current running arbiter handle.\nTry to get current running system.\nAttempts to upgrade the <code>WeakAddr&lt;A&gt;</code> pointer to an <code>Addr&lt;A&gt;</code>.\nAttempts to upgrade the <code>WeakRecipient&lt;M&gt;</code> pointer to an …\nSpawns a future into the context, waiting for it to …\nChecks if the context is paused (waiting for future …\nSpawn a new Arbiter using the Tokio Runtime returned from …\nCreate a new System using the Tokio Runtime returned from …\nMocking utility actor.\nThis actor is able to wrap another actor and accept all …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA measurement of a monotonically nondecreasing clock. …\nInterval returned by <code>interval</code> and <code>interval_at</code>.\nFuture returned by <code>sleep</code> and <code>sleep_until</code>.\nFuture returned by <code>timeout</code> and <code>timeout_at</code>.\nReturns <code>Some(t)</code> where <code>t</code> is the time <code>self + duration</code> if <code>t</code> …\nReturns the amount of time elapsed from another instant to …\nReturns <code>Some(t)</code> where <code>t</code> is the time <code>self - duration</code> if <code>t</code> …\nReturns the instant at which the future will complete.\nReturns the amount of time elapsed from another instant to …\nReturns the amount of time elapsed since this instant was …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a <code>tokio::time::Instant</code> from a <code>std::time::Instant</code>.\nGets a mutable reference to the underlying value in this …\nGets a reference to the underlying value in this timeout.\nCreates new <code>Interval</code> that yields with interval of <code>period</code>. …\nCreates new <code>Interval</code> that yields with interval of <code>period</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this timeout, returning the underlying value.\nConvert the value into a <code>std::time::Instant</code>.\nReturns <code>true</code> if <code>Sleep</code> has elapsed.\nReturns the <code>MissedTickBehavior</code> strategy currently being …\nReturns an instant corresponding to “now”.\nReturns the period of the interval.\nPolls for the next instant in the interval to be reached.\nResets the interval to complete one period after the …\nResets the <code>Sleep</code> instance to a new deadline.\nResets the interval after the specified <code>std::time::Duration</code>…\nResets the interval to a <code>crate::time::Instant</code> deadline.\nResets the interval immediately.\nReturns the amount of time elapsed from another instant to …\nSets the <code>MissedTickBehavior</code> strategy that should be used.\nWaits until <code>duration</code> has elapsed.\nWaits until <code>deadline</code> is reached.\nCompletes when the next instant in the interval has been …\nRequires a <code>Future</code> to complete before the specified …\nA trait which defines message responses.\nSends a value to the associated <code>Receiver</code>.\nConverter trait, packs message into a suitable envelope.\nCancel previously scheduled future.\nWaits for the associated <code>Receiver</code> handle to close.\nAre any senders connected\nHandle of the running future\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nhandle message within new actor and context\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the associated <code>Receiver</code> handle has been …\nCreate new <code>ContextParts</code> instance\nPack message into suitable envelope\nChecks whether the <code>oneshot</code> channel has been closed, and if …\nRestarts the <code>AsyncContext</code> of this <code>ContextFut</code> returning …\nAttempts to send a value on this channel, returning it …\nSpawn new future to this context.\nActor execution state\nInitiate stop process for actor execution\nTerminate actor execution\nSpawn new future to this context and wait future …\nIs context waiting for future completion\nThe receiving end of a channel which implements the <code>Stream</code> …\nThe transmission end of a channel which is used to send …\nReturns the channel capacity.\nCreates an in-memory channel implementation of the <code>Stream</code> …\nIs the channel still open\nReturns whether any senders are still connected.\nSend a message on this <code>Sender&lt;A&gt;</code> without blocking.\nDowngrade to <code>WeakAddressSender</code> which can later be upgraded\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAttempts to send a message on this <code>Sender&lt;A&gt;</code> with blocking.\nReturns the sender side of the channel.\nCreates the sender producer.\nSets the channel capacity.\nAttempts to send a message on this <code>Sender&lt;A&gt;</code> without …\nFuture for the <code>ready</code> function.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nUnwraps the value from this immediately ready future.\nCreates a future that is immediately ready with a value.\nTrait for types which are a placeholder of a value that …\nThe future that this type can be converted into.\nType alias for a pinned box <code>ActorFuture</code> trait object.\nFuture for the <code>map</code> method.\nThe type of value produced on completion.\nFuture for the <code>then</code> combinator, chaining computations on …\nFuture for the <code>timeout</code> combinator, interrupts computations …\nHelper trait that allows conversion of normal future into …\nWrap the future in a Box, pinning it.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert normal future to a <code>ActorFuture</code>\nMap this future’s result to a different type, returning …\nDefinition of the <code>Ready</code> (immediately finished) combinator\nChain on a computation for when a future finished, passing …\nAdd timeout to futures chain.\nConverts normal future into <code>ActorFuture</code>, allowing its …\nFuture for the <code>ready</code> function.\nCreates a “leaf future” from an immediate value of a …\nCreates a “leaf future” from an immediate value of a …\nCreates a future that is immediately ready with a value.\nCreates a new “leaf future” which will resolve with …\nA stream of values, not all of which may have been …\nFuture for the <code>collect</code> method.\nFuture for the <code>finish</code> method.\nStream for the <code>fold</code> method.\nThe type of item this stream will yield on success.\nStream for the <code>map</code> method.\nStream for the <code>skip_while</code> method.\nThe stream that this type can be converted into.\nStream for the <code>take_while</code> method.\nStream for the <code>then</code> method.\nStream for the <code>timeout</code> method.\nHelper trait that allows conversion of normal stream into …\nTransforms a stream into a collection, returning a future …\nTransforms a stream to a future that resolves when stream …\nExecute an accumulating asynchronous computation over a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert normal stream to a <code>ActorStream</code>\nMaps this stream’s items to a different type, returning …\nSkip elements on this stream while the provided …\nTake elements from this stream while the provided …\nComputes from this stream’s items new items of a …\nAdd timeout to stream.\nConverts normal stream into <code>ActorStream</code>\nA convenience for actor futures that return <code>Result</code> values …\nAdapters specific to <code>Result</code>-returning actor futures\nFuture for the <code>and_then</code> combinator, chaining computations …\nThe type of failures yielded by this actor  future\nFuture for the <code>map</code> method.\nFuture for the <code>map</code> method.\nThe type of successful values yielded by this actor future\nExecutes another actor future after this one resolves …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaps this actor future’s error value to a different …\nMaps this actor future’s success value to a different …\nPoll this <code>ActorTryFuture</code> as if it were a <code>ActorFuture</code>.\nA wrapper for the <code>AsyncWrite</code> and <code>Encoder</code> types. The …\nA wrapper for the <code>Sink</code> type.\nA helper trait for write handling.\nA wrapper for <code>AsyncWrite</code> types.\nGracefully closes the sink.\nGracefully closes the sink.\nGracefully closes the sink.\nChecks if the sink is closed.\nChecks if the sink is closed.\nChecks if the sink is closed.\nCalled when the writer emits error.\nCalled when the writer finishes.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the <code>SpawnHandle</code> for this writer.\nReturns the <code>SpawnHandle</code> for this writer.\nReturns the <code>SpawnHandle</code> for this writer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets the write buffer capacity.\nSets the write buffer capacity.\nSends an item to the sink.\nWrites an item to the sink.\nQueues an item to be sent to the sink.\nActors are objects which encapsulate state and behavior.\nActor execution context.\nA helper type for representing different types of message …\nActor execution state\nThe address of an actor.\nAn Arbiter represents a thread that provides an …\nA handle for sending spawn and stop messages to an Arbiter.\nAsynchronous execution context.\nA specialized actor future holder for atomic asynchronous …\nAn actor execution context.\nActor execution context type\nHelper trait which can spawn a future into the actor’s …\nDescribes how to handle messages of a specific type.\nValues yielded by the stream.\nThe errors that can occur during the message delivery …\nRepresent message that can be handled by an actor.\nA helper type that implements the <code>MessageResponse</code> trait.\nThe <code>Recipient</code> type allows to send one specific message to …\nHelper type for representing different type of message …\nA specialized actor future for asynchronous message …\nA specialized future for asynchronous message handling.\nThe type of value that this handler will return.\nThe type of value that this message will resolved with if …\nActor is running.\nA handle to a spawned future.\nActor is started.\nActor is stopped.\nActor is stopping.\nA stream of values produced asynchronously.\nStream handling for Actors.\nActors with the ability to restart after failure.\nActor supervisor\nA manager for a per-thread distributed async runtime.\nRunner that keeps a System’s event loop alive until stop …\nRegisters a stream with the context, ignoring errors.\nRegisters a stream with the context, ignoring errors.\nRegisters a stream with the context, ignoring errors.\nRegisters a stream with the context.\nRegisters a stream with the context.\nRegisters a stream with the context.\nRegister a Stream to the actor context.\nRegister a Stream to the actor context.\nRegister a Stream to the actor context.\nReturns the address of the context.\nIndicates whether the actor is alive.\nCreates an asynchronous response.\nCancels a spawned future.\nReturns whether the actor is still alive.\nReturns whether any addresses are still connected.\nStart a new asynchronous actor given a <code>Context</code>.\nStart a new asynchronous actor given a <code>Context</code>.\nStart a new asynchronous actor given a <code>Context</code>.\nSends a message unconditionally, ignoring any potential …\nSends a message.\nReturns a downgraded <code>WeakAddr</code>.\nReturns a downgraded <code>WeakRecipient</code>\nCalled when stream finishes.\nCalled when stream finishes.\nCalled when stream finishes.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates an asynchronous response.\nThis method is called for every message received by this …\nCalled for every message emitted by the stream.\nReturns a handle to the running future.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a context without spawning it.\nGets the next handle.\nSends the message <code>msg</code> to self. This bypasses the mailbox …\nSends the message <code>msg</code> to self. This bypasses the mailbox …\nSends the message <code>msg</code> to self. This bypasses the mailbox …\nSends the message <code>msg</code> to self after a specified period of …\nSends the message <code>msg</code> to self after a specified period of …\nSends the message <code>msg</code> to self after a specified period of …\nAttempt to pull out the next value of this stream, …\nReturns the <code>Recipient</code> for a specific message type.\nCreates a response.\nCreates a response.\nCalled when the supervisor restarts a failed actor.\nCalled when the supervisor restarts a failed actor.\nCalled when the supervisor restarts a failed actor.\nSpawns a job to execute the given closure periodically, at …\nSpawns a job to execute the given closure periodically, at …\nSpawns a job to execute the given closure periodically, at …\nExecutes a closure after a specified period of time.\nExecutes a closure after a specified period of time.\nExecutes a closure after a specified period of time.\nSends an asynchronous message and waits for a response.\nSends a message and asynchronously wait for a response.\nSets the mailbox capacity.\nReturns the bounds on the remaining length of the stream.\nSpawns a future into the context.\nSpawns the future into the given context.\nStart a new asynchronous actor, returning its address.\nStart a new asynchronous actor, returning its address.\nStart a new asynchronous actor, returning its address.\nStart new supervised actor in current tokio runtime.\nConstruct and start a new asynchronous actor, returning its\nConstruct and start a new asynchronous actor, returning its\nConstruct and start a new asynchronous actor, returning its\nStart new actor in arbiter’s thread.\nStart new actor in arbiter’s thread.\nStart new actor in arbiter’s thread.\nStart new supervised actor in arbiter’s thread.\nCalled when an actor gets polled the first time.\nCalled when an actor gets polled the first time.\nCalled when an actor gets polled the first time.\nCalled when stream emits first item.\nCalled when stream emits first item.\nCalled when stream emits first item.\nRetrieve the current Actor execution state.\nImmediately stop processing incoming messages and switch …\nCalled after an actor is stopped.\nCalled after an actor is stopped.\nCalled after an actor is stopped.\nCalled after an actor is in <code>Actor::Stopping</code> state.\nCalled after an actor is in <code>Actor::Stopping</code> state.\nCalled after an actor is in <code>Actor::Stopping</code> state.\nIndicates whether the actor is stopped or stopping.\nTerminate actor execution unconditionally. This sets the …\nTries to send a message.\nAttempts to send a message.\nSpawns a future into the context, waiting for it to …\nSpawns the future into the given context, waiting for it to\nChecks if the context is paused (waiting for future …\nTrait defines arbiter’s service.\nActors registry\nSystem wide actors registry\nTrait defines system’s service.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet actor’s address from arbiter registry\nGet actor’s address from system registry\nQuery registry for specific actor. Returns address of the …\nReturn address of the service. If service actor is not …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if actor is in registry, if so, return its address\nCheck if actor is in registry, if so, return its address\nMethod is called during service initialization.\nMethod is called during service initialization.\nAdd new actor to the registry by address, panic if actor …\nAdd new actor to the registry by address, panic if actor …\nConstruct and start arbiter service\nConstruct and start system service\n<code>SyncArbiter</code> provides the resources for a single Sync Actor …\nSync actor execution context. This is used instead of impl …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStart a new <code>SyncArbiter</code> with specified number of worker …\nStart a new <code>SyncArbiter</code> with specified number of worker …\nGet the Actor execution state.\nStop the current Actor. <code>SyncContext</code> will stop the existing …\nTerminate the current Actor. <code>SyncContext</code> will terminate …\nAn <code>ActorStream</code> that periodically runs a function in the …\nAn <code>ActorFuture</code> that runs a function in the actor’s …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>TimerFunc</code> with the given duration.\nCreates a new <code>IntervalFunc</code> with the given interval …")